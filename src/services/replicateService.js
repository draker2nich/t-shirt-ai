/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Replicate API —á–µ—Ä–µ–∑ backend –ø—Ä–æ–∫—Å–∏
 */

// URL –≤–∞—à–µ–≥–æ backend –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–∞
const PROXY_API_URL = process.env.REACT_APP_PROXY_URL || 'http://localhost:3001/api';
const SDXL_MODEL_VERSION = '39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b';

/**
 * –°–æ–∑–¥–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)
 */
export async function createPrediction(apiKey, prompt, seed = null) {
  const enhancedPrompt = enhancePromptForSeamless(prompt);
  
  const response = await fetch(`${PROXY_API_URL}/predictions`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({
      apiKey: apiKey,
      version: SDXL_MODEL_VERSION,
      input: {
        prompt: enhancedPrompt,
        negative_prompt: "blurry, low quality, distorted, ugly, watermark, text, signature, logo, letters, words",
        width: 1024,
        height: 1024,
        num_outputs: 1,
        scheduler: "K_EULER",
        num_inference_steps: 25, // ‚ö° –£–º–µ–Ω—å—à–∏–ª —Å 30 –¥–æ 25 –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        guidance_scale: 7.5,
        seed: seed || Math.floor(Math.random() * 1000000)
      }
    })
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.detail || error.error || '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è');
  }

  return await response.json();
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
 */
export async function getPrediction(apiKey, predictionId) {
  const response = await fetch(`${PROXY_API_URL}/predictions/${predictionId}`, {
    headers: {
      'X-API-Key': apiKey,
    }
  });

  if (!response.ok) {
    const error = await response.json();
    throw new Error(error.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
  }

  return await response.json();
}

/**
 * –ñ–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
 */
export async function waitForPrediction(apiKey, predictionId, onProgress = null) {
  let attempts = 0;
  const maxAttempts = 90; // –£–≤–µ–ª–∏—á–∏–ª –¥–æ 90 —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
  
  while (attempts < maxAttempts) {
    const prediction = await getPrediction(apiKey, predictionId);
    
    if (onProgress) {
      onProgress(prediction);
    }
    
    if (prediction.status === 'succeeded') {
      return prediction;
    }
    
    if (prediction.status === 'failed') {
      throw new Error(prediction.error || '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
    }
    
    if (prediction.status === 'canceled') {
      throw new Error('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
    }
    
    // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    await new Promise(resolve => setTimeout(resolve, 1000));
    attempts++;
  }
  
  throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è');
}

/**
 * ‚ö° –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–∏–∑–∞–π–Ω–∞
 * –°–æ–∑–¥–∞—ë—Ç –í–°–ï –∑–∞–ø—Ä–æ—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –∑–∞—Ç–µ–º –∂–¥—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 */
export async function generateDesigns(apiKey, prompt, numberOfVariants = 4) {
  console.log(`üöÄ –ó–∞–ø—É—Å–∫ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${numberOfVariants} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤...`);
  
  // ‚ö° –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û —Å–æ–∑–¥–∞—ë–º –í–°–ï –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –°–†–ê–ó–£
  const predictionPromises = Array.from({ length: numberOfVariants }, (_, i) => {
    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ ${i + 1}/${numberOfVariants}`);
    return createPrediction(apiKey, prompt);
  });
  
  // –ñ–¥—ë–º —Å–æ–∑–¥–∞–Ω–∏—è –í–°–ï–• –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
  const predictions = await Promise.all(predictionPromises);
  console.log(`‚úÖ –í—Å–µ ${numberOfVariants} –∑–∞–ø—Ä–æ—Å–∞ —Å–æ–∑–¥–∞–Ω—ã, –æ–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...`);
  
  // –¢–µ–ø–µ—Ä—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∂–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –í–°–ï–• –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
  const results = await Promise.all(
    predictions.map((pred, index) => {
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ ${index + 1}/${numberOfVariants} (ID: ${pred.id})`);
      return waitForPrediction(apiKey, pred.id, (status) => {
        console.log(`üìä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${index + 1}: —Å—Ç–∞—Ç—É—Å ${status.status}`);
      });
    })
  );
  
  console.log(`üéâ –í—Å–µ ${numberOfVariants} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã!`);
  
  // –ò–∑–≤–ª–µ–∫–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  return results
    .filter(result => result.output && result.output[0])
    .map((result, index) => ({
      id: result.id,
      url: result.output[0],
      prompt: prompt,
      seed: result.input?.seed,
      index: index
    }));
}

/**
 * –£–ª—É—á—à–∞–µ—Ç –ø—Ä–æ–º—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–µ—Å—à–æ–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
 */
function enhancePromptForSeamless(prompt) {
  const seamlessKeywords = [
    'seamless pattern',
    'tileable',
    'repeating pattern',
    'high quality',
    'detailed',
    'professional design for textile printing',
    'vibrant colors'
  ];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
  const hasSeamless = seamlessKeywords.some(keyword => 
    prompt.toLowerCase().includes(keyword.toLowerCase())
  );
  
  if (hasSeamless) {
    return prompt;
  }
  
  return `${prompt}, seamless pattern, tileable, high quality, detailed, professional design for textile printing`;
}

/**
 * –í–∞–ª–∏–¥–∞—Ü–∏—è API –∫–ª—é—á–∞
 */
export function validateApiKey(apiKey) {
  if (!apiKey || apiKey.trim() === '') {
    return { valid: false, error: 'API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' };
  }
  
  if (!apiKey.startsWith('r8_')) {
    return { valid: false, error: 'API –∫–ª—é—á –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å r8_' };
  }
  
  if (apiKey.length < 40) {
    return { valid: false, error: 'API –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π' };
  }
  
  return { valid: true };
}
